name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'

jobs:
  # CI: 테스트 실행
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.17-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U test > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i/30: PostgreSQL is not ready yet..."
            sleep 2
          done
          echo "PostgreSQL failed to become ready in time"
          exit 1
        env:
          PGPASSWORD: test

      - name: Verify PostgreSQL connection
        run: |
          psql -h localhost -U test -d testdb -c "SELECT version();"
        env:
          PGPASSWORD: test

      - name: Run tests with coverage
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew clean test --console=plain

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/build/test-results/test/'
          retention-days: 7

  # CD: 빌드 및 ECR 업로드
  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Delete all ECR images
        env:
          ECR_REPOSITORY: ${{ secrets.DEV_ECR_REPO }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_PUBLIC_REPO_REGION: ${{ secrets.AWS_PUBLIC_REPO_REGION }}
        run: |
          echo "Deleting all images from ECR repository: $ECR_REPOSITORY"
          
          IMAGE_IDS=$(aws ecr-public describe-images \
            --region $AWS_PUBLIC_REPO_REGION \
            --repository-name $ECR_REPOSITORY \
            --query 'imageDetails[*].{imageDigest:imageDigest}' \
            --output json 2>/dev/null || echo "[]")
          
          if [ "$IMAGE_IDS" != "[]" ] && [ "$IMAGE_IDS" != "" ]; then
            echo "Found images to delete..."
            aws ecr-public batch-delete-image \
              --region $AWS_PUBLIC_REPO_REGION \
              --repository-name $ECR_REPOSITORY \
              --image-ids "$IMAGE_IDS" \
              && echo "Successfully deleted all images" \
              || echo "Failed to delete some images"
          else
            echo "No images to delete or repository is empty"
          fi

      - name: Build and Push Image to AWS ECR Public Repo
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_PUBLIC_REPO_REGION }} | docker login --username AWS --password-stdin public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}
          docker build -t ${{ secrets.DEV_ECR_REPO }}:latest .
          docker tag ${{ secrets.DEV_ECR_REPO }}:latest public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest
          docker push public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest

  # CD: EC2 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_PEM_KEY }}
          script: |
            sudo docker stop spring-dev-server
            sudo docker rm spring-dev-server
            sudo docker image prune -a -f
            sudo docker pull public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest
            sudo docker run --name spring-dev-server --env-file /home/ec2-user/official/.env -d -p 8086:8080 -t public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest