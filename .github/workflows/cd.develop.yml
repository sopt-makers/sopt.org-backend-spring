name: Develop deploy workflow

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

  build:
    needs: test  # test job이 성공해야 build 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Delete all ECR images
        env:
          ECR_REPOSITORY: ${{ secrets.DEV_ECR_REPO }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_PUBLIC_REPO_REGION: ${{ secrets.AWS_PUBLIC_REPO_REGION }}
        run: |
          echo "Deleting all images from ECR repository: $ECR_REPOSITORY"
          
          IMAGE_IDS=$(aws ecr-public describe-images \
            --region $AWS_PUBLIC_REPO_REGION \
            --repository-name $ECR_REPOSITORY \
            --query 'imageDetails[*].{imageDigest:imageDigest}' \
            --output json 2>/dev/null || echo "[]")
          
          if [ "$IMAGE_IDS" != "[]" ] && [ "$IMAGE_IDS" != "" ]; then
            echo "Found images to delete..."
            aws ecr-public batch-delete-image \
              --region $AWS_PUBLIC_REPO_REGION \
              --repository-name $ECR_REPOSITORY \
              --image-ids "$IMAGE_IDS" \
              && echo "Successfully deleted all images" \
              || echo "Failed to delete some images"
          else
            echo "No images to delete or repository is empty"
          fi

      - name: Push Image to AWS ECR Public Repo
        id: ecr-image-push
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_PUBLIC_REPO_REGION }} | docker login --username AWS --password-stdin public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}
          docker build -t ${{ secrets.DEV_ECR_REPO }}:latest .
          docker tag ${{ secrets.DEV_ECR_REPO }}:latest public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest
          docker push public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: ssh command deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_PEM_KEY }}
          script: |
            sudo docker stop spring-dev-server
            sudo docker rm spring-dev-server
            sudo docker image prune -a -f
            sudo docker pull public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest
            sudo docker run --name spring-dev-server --env-file /home/ec2-user/official/.env -d -p 8086:8080 -t public.ecr.aws/${{ secrets.AWS_ACCOUNT_ID }}/${{ secrets.DEV_ECR_REPO }}:latest